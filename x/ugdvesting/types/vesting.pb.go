// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ugdvesting/ugdvesting/vesting.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VestingData struct {
	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount    int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Start     int64  `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	Duration  int64  `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Parts     int32  `protobuf:"varint,5,opt,name=parts,proto3" json:"parts,omitempty"`
	Block     int64  `protobuf:"varint,6,opt,name=block,proto3" json:"block,omitempty"`
	Percent   int32  `protobuf:"varint,7,opt,name=percent,proto3" json:"percent,omitempty"`
	Processed bool   `protobuf:"varint,8,opt,name=processed,proto3" json:"processed,omitempty"`
	Cliff     int32  `protobuf:"varint,9,opt,name=cliff,proto3" json:"cliff,omitempty"`
}

func (m *VestingData) Reset()         { *m = VestingData{} }
func (m *VestingData) String() string { return proto.CompactTextString(m) }
func (*VestingData) ProtoMessage()    {}
func (*VestingData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88023dcf62d3348, []int{0}
}
func (m *VestingData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingData.Merge(m, src)
}
func (m *VestingData) XXX_Size() int {
	return m.Size()
}
func (m *VestingData) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingData.DiscardUnknown(m)
}

var xxx_messageInfo_VestingData proto.InternalMessageInfo

func (m *VestingData) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *VestingData) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *VestingData) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *VestingData) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *VestingData) GetParts() int32 {
	if m != nil {
		return m.Parts
	}
	return 0
}

func (m *VestingData) GetBlock() int64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *VestingData) GetPercent() int32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *VestingData) GetProcessed() bool {
	if m != nil {
		return m.Processed
	}
	return false
}

func (m *VestingData) GetCliff() int32 {
	if m != nil {
		return m.Cliff
	}
	return 0
}

func init() {
	proto.RegisterType((*VestingData)(nil), "ugdvesting.ugdvesting.VestingData")
}

func init() {
	proto.RegisterFile("ugdvesting/ugdvesting/vesting.proto", fileDescriptor_f88023dcf62d3348)
}

var fileDescriptor_f88023dcf62d3348 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0xeb, 0xaf, 0x5f, 0xff, 0x99, 0xcd, 0x02, 0x64, 0x21, 0x64, 0x45, 0xb0, 0x64, 0x49,
	0x3b, 0xf0, 0x06, 0x88, 0x17, 0x20, 0x03, 0x03, 0x9b, 0x6b, 0xbb, 0xae, 0x69, 0x13, 0x5b, 0xf6,
	0x0d, 0x82, 0xb7, 0xe0, 0xb1, 0x18, 0x3b, 0x32, 0xa2, 0x64, 0xe4, 0x25, 0x50, 0x9c, 0x86, 0x74,
	0xf2, 0xf9, 0x9d, 0x63, 0x5f, 0x5f, 0x1d, 0x7c, 0x5b, 0x69, 0xf9, 0xaa, 0x02, 0x98, 0x52, 0xaf,
	0x4e, 0xe4, 0xf1, 0x5c, 0x3a, 0x6f, 0xc1, 0x92, 0x8b, 0x21, 0x59, 0x0e, 0xf2, 0xe6, 0x07, 0xe1,
	0xb3, 0xa7, 0x4e, 0x3f, 0x70, 0xe0, 0x84, 0xe2, 0x19, 0x97, 0xd2, 0xab, 0x10, 0x28, 0x4a, 0x50,
	0xba, 0xc8, 0x7b, 0x24, 0x97, 0x78, 0xca, 0x0b, 0x5b, 0x95, 0x40, 0xff, 0x25, 0x28, 0x1d, 0xe7,
	0x47, 0x22, 0xe7, 0x78, 0x12, 0x80, 0x7b, 0xa0, 0xe3, 0x68, 0x77, 0x40, 0xae, 0xf0, 0x5c, 0x56,
	0x9e, 0x83, 0xb1, 0x25, 0xfd, 0x1f, 0x83, 0x3f, 0x6e, 0x5f, 0x38, 0xee, 0x21, 0xd0, 0x49, 0x82,
	0xd2, 0x49, 0xde, 0x41, 0xeb, 0xae, 0xf7, 0x56, 0xec, 0xe8, 0xb4, 0x9b, 0x13, 0xa1, 0xdd, 0xc7,
	0x29, 0x2f, 0x54, 0x09, 0x74, 0x16, 0x6f, 0xf7, 0x48, 0xae, 0xf1, 0xc2, 0x79, 0x2b, 0x54, 0x08,
	0x4a, 0xd2, 0x79, 0x82, 0xd2, 0x79, 0x3e, 0x18, 0xed, 0x34, 0xb1, 0x37, 0x9b, 0x0d, 0x5d, 0x74,
	0x7f, 0x44, 0xb8, 0xdf, 0x7d, 0xd6, 0x0c, 0x1d, 0x6a, 0x86, 0xbe, 0x6b, 0x86, 0x3e, 0x1a, 0x36,
	0x3a, 0x34, 0x6c, 0xf4, 0xd5, 0xb0, 0xd1, 0xf3, 0xa3, 0x36, 0xb0, 0xad, 0xd6, 0x4b, 0x61, 0x8b,
	0x55, 0x55, 0x1a, 0xed, 0x8d, 0xcc, 0x9c, 0xb7, 0x2f, 0x4a, 0xc0, 0x4a, 0xd8, 0x50, 0xd8, 0x90,
	0x05, 0xb9, 0xcb, 0xfa, 0x68, 0xab, 0xa4, 0x56, 0x5b, 0xab, 0xb3, 0xbe, 0xec, 0xb7, 0xd3, 0xe6,
	0xe1, 0xdd, 0xa9, 0xb0, 0x9e, 0xc6, 0xe2, 0xef, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x6d, 0xc2,
	0x27, 0x10, 0x9f, 0x01, 0x00, 0x00,
}

func (m *VestingData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cliff != 0 {
		i = encodeVarintVesting(dAtA, i, uint64(m.Cliff))
		i--
		dAtA[i] = 0x48
	}
	if m.Processed {
		i--
		if m.Processed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Percent != 0 {
		i = encodeVarintVesting(dAtA, i, uint64(m.Percent))
		i--
		dAtA[i] = 0x38
	}
	if m.Block != 0 {
		i = encodeVarintVesting(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x30
	}
	if m.Parts != 0 {
		i = encodeVarintVesting(dAtA, i, uint64(m.Parts))
		i--
		dAtA[i] = 0x28
	}
	if m.Duration != 0 {
		i = encodeVarintVesting(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	if m.Start != 0 {
		i = encodeVarintVesting(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x18
	}
	if m.Amount != 0 {
		i = encodeVarintVesting(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintVesting(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVesting(dAtA []byte, offset int, v uint64) int {
	offset -= sovVesting(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VestingData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovVesting(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovVesting(uint64(m.Amount))
	}
	if m.Start != 0 {
		n += 1 + sovVesting(uint64(m.Start))
	}
	if m.Duration != 0 {
		n += 1 + sovVesting(uint64(m.Duration))
	}
	if m.Parts != 0 {
		n += 1 + sovVesting(uint64(m.Parts))
	}
	if m.Block != 0 {
		n += 1 + sovVesting(uint64(m.Block))
	}
	if m.Percent != 0 {
		n += 1 + sovVesting(uint64(m.Percent))
	}
	if m.Processed {
		n += 2
	}
	if m.Cliff != 0 {
		n += 1 + sovVesting(uint64(m.Cliff))
	}
	return n
}

func sovVesting(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVesting(x uint64) (n int) {
	return sovVesting(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VestingData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVesting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parts", wireType)
			}
			m.Parts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percent", wireType)
			}
			m.Percent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Percent |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Processed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Processed = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cliff", wireType)
			}
			m.Cliff = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cliff |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVesting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVesting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVesting(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVesting
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVesting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVesting
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVesting
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVesting
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVesting        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVesting          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVesting = fmt.Errorf("proto: unexpected end of group")
)
